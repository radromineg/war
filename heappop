import heapq

def astar(start, goal, graph):
    open_list = []
    heapq.heappush(open_list, (0, start))
    came_from = {}
    g_score = {start: 0}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]

        for neighbor, cost in graph[current]:
            new_score = g_score[current] + cost
            if neighbor not in g_score or new_score < g_score[neighbor]:
                g_score[neighbor] = new_score
                heapq.heappush(open_list, (new_score, neighbor))
                came_from[neighbor] = current

    return None

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}
print(astar('A', 'D', graph))
